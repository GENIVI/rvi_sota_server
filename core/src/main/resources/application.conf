akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  // The followwing settings are needed to support last file uploads
  http.server.parsing.max-content-length = 500MB
  http.server.request-timeout = 15 minutes
  http.server.idle-timeout = 15 minutes
  actor {
    debug {
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on
      receive = on
    }
  }
}


server = {
  host = "0.0.0.0"
  host = ${?HOST}
  port = 8080
  port = ${?PORT}
}

core {
  interactionProtocol = "http" # or "rvi"
  interactionProtocol = ${?CORE_INTERACTION_PROTOCOL}
  defaultNs = "default"
  defaultNs = ${?DEFAULT_NAMESPACE}
  s3 = {
    accessKey = ${?CORE_AWS_ACCESS_KEY}
    secretKey = ${?CORE_AWS_SECRET_KEY}
    bucketId = ${?CORE_AWS_BUCKET_ID}
  }
}

rvi {
  endpoint = "http://127.0.0.1:8801"
  endpoint = ${?RVI_URI}
  transfer {
    chunkSize = 64K
    ackTimeout = 30 s
    installTimeout = 60 s
  }
  sotaServicesUri = "http://"${server.host}":"${server.port}"/rvi"
  sotaServicesUri = ${?SOTA_SERVICES_URI}
}

resolver = {
  baseUri = "http://localhost:8081"
  baseUri = ${?RESOLVER_API_URI}
  packagesUri = ${resolver.baseUri}"/api/v1/resolver/packages"
  resolveUri = ${resolver.baseUri}"/api/v1/resolver/resolve"
  vehiclesUri = ${resolver.baseUri}"/api/v1/resolver/devices"
}

device_registry = {
  baseUri = "http://localhost:8083"
  baseUri = ${?DEVICE_REGISTRY_API_URI}
  devicesUri = "/api/v1/devices"
  deviceGroupsUri = "/api/v1/device_groups"
  mydeviceUri = "/api/v1/mydevice"
}

user_profile = {
  use = false // this ignores the user profile service
  use = ${?USE_USER_PROFILE}
  baseUri = "http://localhost:8085"
  baseUri = ${?USER_PROFILE_URI}
  api = "/api/v1"
}

upload {
  //mediaTypes = ["application/x-rpm", "application/x-redhat-package-manager", "application/binary", "application/octet-stream"]
  store = "/tmp/"
}

packages = {
  versionFormat = """^\d+\.\d+\.\d+$"""
  versionFormat = ${?PACKAGES_VERSION_FORMAT}
  absolutePath = "/usr/local/packages"
  absolutePath = ${?PACKAGES_PATH}
  extension = "rpm"
  extension = ${?PACKAGES_EXTENSION}
  checksumExtension = "sha1"
  checksumExtension = ${?PACKAGES_CHECKSUM_EXTENSION}
}

database = {
  driver = "org.mariadb.jdbc.Driver"
  url = "jdbc:mariadb://localhost:3306/sota_core"
  url = ${?CORE_DB_URL}
  properties {
    user = "sota"
    user = ${?CORE_DB_USER}
    password = "s0ta"
    password = ${?CORE_DB_PASSWORD}
  }
  numThreads = 10
  numThreads = ${?DB_NUM_THREADS}
  queueSize = 1000
  queueSize = ${?DB_QUEUE_SIZE}
  connectionTimeout = 1s
  connectionTimeout = ${?DB_CONNECTION_TIMEOUT}
  validationTimeout = 1s
  validationTimeout = ${?DB_VALIDATION_TIMEOUT}
  migrate = false
  migrate = ${?CORE_DB_MIGRATE}
  registerMbeans = true
}


auth {
  protocol = "oauth.accesstoken"
  protocol = ${?AUTH_PROTOCOL}
  verification = "local" # three options: none, local, auth-plus
  verification = ${?AUTH_VERIFICATION}
  token {
    secret = "AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
    secret = ${?JWT_SECRET}
  }
}

scopes = {
  domain = ""
  domain = ${?SCOPES_DOMAIN}
}

authplus {
  api.uri = "http://localhost:9001"
  api.uri = ${?AUTHPLUS_HOST}
  client{
    id = ""
    id = ${?AUTHPLUS_CLIENT_ID}
    secret = ""
    secret = ${?AUTHPLUS_CLIENT_SECRET}
  }
}

messaging.kafka.groupIdPrefix = "core"
