# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret="YM5B6o<ywKn4tTyA;tOZ<2xUEajF4DDi=O/PPm1Q^w2LqtKISd9oqYT6b>>C1gQa"
play.crypto.secret=${?PLAY_CRYPTO_SECRET}

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

play {
  server {
    #disable pidfile so the webserver plays nice with docker
    pidfile.path = "/dev/null"
  }
}

core.database {
  driver = "org.mariadb.jdbc.Driver"
  url = "jdbc:mariadb://localhost:3306/sota_core"
  url = ${?CORE_TEST_DB_URL}
  properties {
    user = "sota"
    user = ${?CORE_TEST_DB_USER}
    password = "s0ta"
    password = ${?CORE_TEST_DB_PASSWORD}
  }
  numThreads = 10
  connectionTimeout = 5000
  validationTimeout = 5000
}

packages {
  versionFormat = """^\d+\.\d+\.\d+$"""
  versionFormat = ${?PACKAGES_VERSION_FORMAT}
}

resolver.database {
  driver = "org.mariadb.jdbc.Driver"
  url = "jdbc:mariadb://localhost:3306/sota_resolver"
  url = ${?RESOLVER_TEST_DB_URL}
  properties {
    user = "sota"
    user = ${?RESOLVER_TEST_DB_USER}
    password = "s0ta"
    password = ${?RESOLVER_TEST_DB_PASSWORD}
  }
  numThreads = 10
  connectionTimeout = 5000
  validationTimeout = 5000
}

# Enables in-memore LDAP server in DEV and TEST modes
play.modules.enabled += "org.genivi.webserver.Authentication.InMemoryDirectoryModule"

default.ssl-config {

  logger = "com.typesafe.sslconfig.util.NoopLogger"

  # Whether we should use the default JVM SSL configuration or not
  # When false additional configuration will be applied on the context (as configured in ssl-config).
  default = false

  # The ssl protocol to use
  protocol = "TLSv1.2"

  # Whether revocation lists should be checked, if null, defaults to platform default setting.
  checkRevocation = null

  # A sequence of URLs for obtaining revocation lists
  revocationLists = []

  # The enabled cipher suites. If empty, uses the platform default.
  enabledCipherSuites = []

  # The enabled protocols. If empty, uses the platform default.
  enabledProtocols = ["TLSv1.2", "TLSv1.1", "TLSv1"]

  # The disabled signature algorithms
  disabledSignatureAlgorithms = ["MD2", "MD4", "MD5"]

  # The disabled key algorithms
  disabledKeyAlgorithms = ["RSA keySize < 2048", "DSA keySize < 2048", "EC keySize < 224"]

  # The debug configuration
  debug = []

  # The hostname verifier class.
  # If non null, should be the fully qualify classname of a class that imlpements HostnameVerifier,
  # otherwise the default will be used
  hostnameVerifierClass = null

  sslParameters {
    # translates to a setNeedClientAuth / setWantClientAuth calls
    # "default" – leaves the (which for JDK8 means wantClientAuth and needClientAuth are set to false.)
    # "none"    – `setNeedClientAuth(false)`
    # "want"    – `setWantClientAuth(true)`
    # "need"    – `setNeedClientAuth(true)`
    clientAuth = "default"

    # protocols (names)
    protocols = []
  }

  # Configuration for the key manager
  keyManager {
    # The key manager algorithm. If empty, uses the platform default.
    algorithm = null

    # The key stores
    stores = [
    ]
    # The key stores should look like this
    prototype.stores {
      # The store type. If null, defaults to the platform default store type, ie JKS.
      type = null

      # The path to the keystore file. Either this must be non null, or data must be non null.
      path = null

      # The data for the keystore. Either this must be non null, or path must be non null.
      data = null

      # The password for loading the keystore. If null, uses no password.
      password = null
    }
  }

  trustManager {
    # The trust manager algorithm. If empty, uses the platform default.
    algorithm = null

    # The trust stores
    stores = [
    ]
    # The key stores should look like this
    prototype.stores {
      # The store type. If null, defaults to the platform default store type, ie JKS.
      type = null

      # The path to the keystore file. Either this must be non null, or data must be non null.
      path = null

      # The data for the keystore. Either this must be non null, or path must be non null.
      data = null
    }

  }

  # The loose ssl options.  These allow configuring ssl to be more loose about what it accepts,
  # at the cost of introducing potential security issues.
  loose {

    # Whether weak protocols should be allowed
    allowWeakProtocols = false

    # Whether weak ciphers should be allowed
    allowWeakCiphers = false

    # If non null, overrides the platform default for whether legacy hello messsages should be allowed.
    allowLegacyHelloMessages = null

    # If non null, overrides the platform defalut for whether unsafe renegotiation should be allowed.
    allowUnsafeRenegotiation = null

    # Whether hostname verification should be disabled
    disableHostnameVerification = false

    # Whether the SNI (Server Name Indication) TLS extension should be disabled
    # This setting MAY be respected by client libraries.
    #
    # https://tools.ietf.org/html/rfc3546#sectiom-3.1
    disableSNI = false

    # Whether any certificate should be accepted or not
    acceptAnyCertificate = false
  }

  # Debug configuration
  debug {

    # Turn on all debugging
    all = false

    # Turn on ssl debugging
    ssl = false

    # Turn certpath debugging on
    certpath = false

    # Turn ocsp debugging on
    ocsp = false

    # Enable per-record tracing
    record = false

    # hex dump of record plaintext, requires record to be true
    plaintext = false

    # print raw SSL/TLS packets, requires record to be true
    packet = false

    # Print each handshake message
    handshake = false

    # Print hex dump of each handshake message, requires handshake to be true
    data = false

    # Enable verbose handshake message printing, requires handshake to be true
    verbose = false

    # Print key generation data
    keygen = false

    # Print session activity
    session = false

    # Print default SSL initialization
    defaultctx = false

    # Print SSLContext tracing
    sslctx = false

    # Print session cache tracing
    sessioncache = false

    # Print key manager tracing
    keymanager = false

    # Print trust manager tracing
    trustmanager = false

    # Turn pluggability debugging on
    pluggability = false

  }
}

# LDAP authentication configuration
ldap {
  connection {
    host = "localhost"
    host = ${?LDAP_HOST}
    port = 8389
    port = ${?LDAP_PORT}
    authentication = {
      type = "simple"
      dn = "uid=sota,ou=users,dc=genivi,dc=org"
      dn = ${?LDAP_AUTHN_ID}
      password = "s0ta"
      password = ${?LDAP_PASSWORD}
    }
    ssl {
      default = false
      protocol = "TLSv1.2"
      enabledProtocols = [ "TLSv1.2" ]
      enabledCiphers = ["TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"]

      keyManager = {
        storeType = "JKS"
        storeType = ${?LDAP_KEY_STORE_TYPE}
        storePath = "conf/certs/client.jks"
        storePath = ${?LDAP_KEY_STORE_PATH}
        storePassword = "L36MCSvsVK"
        storePassword = ${?LDAP_KEY_STORE_PASSWORD}
        stores = [
          // Note: app must be run from ./play, which loads the KEY_PASSWORD environment variable.
          { type: ${ldap.connection.ssl.keyManager.storeType}, path: ${ldap.connection.ssl.keyManager.storePath}, password: ${ldap.connection.ssl.keyManager.storePassword} },
        ]
      }

      trustManager = {
        stores = [
          { type = "JKS"
            path = "conf/certs/exampletrust.jks"
            path = ${?LDAP_TRUST_STORE_PATH} }
        ]
      }
    }
  }
  search {
    baseDN = "ou=users,dc=genivi,dc=org"
    baseDN = ${?AUTHN_BASE_DN}
    searchFilter = "uid=%s"
    searchFilter = ${?AUTHN_SEARCH_FILTER}
  }
  inmem {
    enabled = ${?LDAP_INMEMORY_ENABLE}
    baseDN = "dc=genivi,dc=org"
    port   = ${ldap.connection.port}
    ldifResource = "/users.ldif"
  }
}
# Remote APIs
core.api.uri = "http://localhost:8080"
core.api.uri = ${?CORE_API_URI}
resolver.api.uri = "http://localhost:8081"
resolver.api.uri = ${?RESOLVER_API_URI}
device_registry.api.uri = "http://localhost:8083"
device_registry.api.uri = ${?DEVICE_REGISTRY_API_URI}

test.webserver.host  = "localhost"
test.webserver.host  = ${?DOCKER_IP}
#the default test port is already specified by scalatest
test.webserver.port  = 9000

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

messaging.kafka.groupIdPrefix = "web"
